general_config:
    model: "SGDClassifier"
    dataset: "digit"
    root_log_dir: "./results"
learning: # arguments of LearningCurveDisplay.from_estimator()
    groups:
    train_sizes: "np.linspace(0.1, 1., 10)" # [0.1, 0.33, 0.55, 0.78, 1.]
    cv: &cv 10
    scoring: &scoring "accuracy"
    exploit_incremental_learning: False
    n_jobs: &n_jobs
    pre_dispatch: &pre_dispatch "all"
    verbose: &verbose 0
    shuffle: &shuffle False
    random_state: 42
    #error_score:
    fit_params: &fit_params 
    #ax:
    negate_score: &negate_score False
    score_name: &score_name
    score_type: &score_type "both"
    std_display_style: &std_display_style "fill_between"
    line_kw: &line_kw 
    fill_between_kw: &fill_between_kw
    errorbar_kw: &errorbar_kw
validation: # arguments of ValidationCurveDisplay.from_estimator()
    param_name: "alpha"
    param_range: "np.linspace(0, 0.001, 10)"
    cv: *cv
    scoring: *scoring
    n_jobs: *n_jobs
    pre_dispatch: *pre_dispatch #"all"
    verbose: *verbose
    #error_score:
    fit_params: *fit_params
    #ax:
    negate_score: *negate_score
    score_name: *score_name
    score_type: *score_type
    std_display_style: *std_display_style
    line_kw: *line_kw
    fill_between_kw: *fill_between_kw
    errorbar_kw: *errorbar_kw
model_config:
    loss: "hinge"
    penalty: "l2"
    l1_ratio: 0.15
    fit_intercept: True
    max_iter: 1000
    tol: 1.0e-3
    shuffle: True
    verbose: 0
    epsilon: 0.1
    n_jobs: 
    random_state: 42
    learning_rate: "optimal"
    eta0: 0.0
    power_t: 0.5
    early_stopping: False
    validation_fraction: 0.1
    n_iter_no_change: 5
    class_weight:
    warm_start: False
    average: False


